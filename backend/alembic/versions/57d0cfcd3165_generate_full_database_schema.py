"""Generate full database schema

Revision ID: 57d0cfcd3165
Revises: ea0749a335ca
Create Date: 2025-06-06 15:26:32.362700

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '57d0cfcd3165'
down_revision: Union[str, None] = 'ea0749a335ca'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS calculation")
    op.execute("CREATE SCHEMA IF NOT EXISTS imagery_data")
    op.execute("CREATE SCHEMA IF NOT EXISTS project_mgmt")
    op.execute("CREATE SCHEMA IF NOT EXISTS reference")
    op.execute("CREATE SCHEMA IF NOT EXISTS spatial")
    op.execute("CREATE SCHEMA IF NOT EXISTS user_mgmt")

    # Drop existing ENUM types if they exist to avoid conflicts
    op.execute("DROP TYPE IF EXISTS projectstatus CASCADE")
    op.execute("DROP TYPE IF EXISTS imagerysourceenum CASCADE")
    op.execute("DROP TYPE IF EXISTS imagenystatusenum CASCADE")
    op.execute("DROP TYPE IF EXISTS foresttypeenum CASCADE")

    # Explicitly drop the problematic index before creating the table
    op.execute("DROP INDEX IF EXISTS project_mgmt.idx_projects_location_geometry")

    op.create_table('allometric_equations',
    sa.Column('equation_id', sa.Integer(), nullable=False),
    sa.Column('equation_name', sa.String(length=255), nullable=False),
    sa.Column('equation_formula', sa.String(length=500), nullable=False),
    sa.Column('region', sa.String(length=100), nullable=True),
    sa.Column('species_group', sa.String(length=100), nullable=True),
    sa.Column('source', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('equation_id'),
    schema='reference'
    )
    op.create_index(op.f('ix_reference_allometric_equations_equation_id'), 'allometric_equations', ['equation_id'], unique=False, schema='reference')
    op.create_table('permissions',
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('permission_name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('permission_id'),
    schema='user_mgmt'
    )
    op.create_index(op.f('ix_user_mgmt_permissions_permission_id'), 'permissions', ['permission_id'], unique=False, schema='user_mgmt')
    op.create_index(op.f('ix_user_mgmt_permissions_permission_name'), 'permissions', ['permission_name'], unique=True, schema='user_mgmt')
    op.create_table('roles',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('role_name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('role_id'),
    schema='user_mgmt'
    )
    op.create_index(op.f('ix_user_mgmt_roles_role_id'), 'roles', ['role_id'], unique=False, schema='user_mgmt')
    op.create_index(op.f('ix_user_mgmt_roles_role_name'), 'roles', ['role_name'], unique=True, schema='user_mgmt')
    op.create_table('tree_species',
    sa.Column('species_id', sa.Integer(), nullable=False),
    sa.Column('scientific_name', sa.String(length=150), nullable=False),
    sa.Column('common_name_en', sa.String(length=150), nullable=True),
    sa.Column('common_name_vi', sa.String(length=150), nullable=True),
    sa.Column('wood_density', sa.Numeric(precision=6, scale=4), nullable=True),
    sa.Column('default_allometric_equation_id', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['default_allometric_equation_id'], ['reference.allometric_equations.equation_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('species_id'),
    schema='reference'
    )
    op.create_index(op.f('ix_reference_tree_species_scientific_name'), 'tree_species', ['scientific_name'], unique=True, schema='reference')
    op.create_index(op.f('ix_reference_tree_species_species_id'), 'tree_species', ['species_id'], unique=False, schema='reference')
    op.create_table('role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['user_mgmt.permissions.permission_id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['user_mgmt.roles.role_id'], ),
    sa.PrimaryKeyConstraint('role_id', 'permission_id'),
    schema='user_mgmt'
    )
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=True),
    sa.Column('organization', sa.String(length=100), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['user_mgmt.roles.role_id'], ),
    sa.PrimaryKeyConstraint('user_id'),
    schema='user_mgmt'
    )
    op.create_index(op.f('ix_user_mgmt_users_email'), 'users', ['email'], unique=True, schema='user_mgmt')
    op.create_index(op.f('ix_user_mgmt_users_user_id'), 'users', ['user_id'], unique=False, schema='user_mgmt')
    op.create_index(op.f('ix_user_mgmt_users_username'), 'users', ['username'], unique=True, schema='user_mgmt')
    op.create_table('projects',
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('project_name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'ACTIVE', 'COMPLETED', 'ARCHIVED', name='projectstatus'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('location_geometry', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['user_mgmt.users.user_id'], ),
    sa.PrimaryKeyConstraint('project_id'),
    schema='project_mgmt'
    )
    op.create_index('idx_projects_location_geometry', 'projects', ['location_geometry'], unique=False, schema='project_mgmt', postgresql_using='gist')
    op.create_index(op.f('ix_project_mgmt_projects_project_id'), 'projects', ['project_id'], unique=False, schema='project_mgmt')
    op.create_index(op.f('ix_project_mgmt_projects_project_name'), 'projects', ['project_name'], unique=False, schema='project_mgmt')
    op.create_table('imagery',
    sa.Column('imagery_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('source', sa.Enum('SATELLITE', 'DRONE', 'UPLOADED', name='imagerysourceenum'), nullable=False),
    sa.Column('source_identifier', sa.String(length=255), nullable=True),
    sa.Column('acquisition_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('sensor_type', sa.String(length=100), nullable=True),
    sa.Column('resolution_m', sa.Float(), nullable=True),
    sa.Column('cloud_cover_percent', sa.Float(), nullable=True),
    sa.Column('file_path', sa.String(length=1024), nullable=False),
    sa.Column('file_format', sa.String(length=50), nullable=True),
    sa.Column('crs', sa.String(length=100), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'RECEIVED', 'VALIDATING', 'PREPROCESSING', 'READY', 'ERROR', name='imagerystatusenum'), nullable=False),
    sa.Column('processing_log', sa.Text(), nullable=True),
    sa.Column('uploaded_by_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project_mgmt.projects.project_id'], ),
    sa.ForeignKeyConstraint(['uploaded_by_id'], ['user_mgmt.users.user_id'], ),
    sa.PrimaryKeyConstraint('imagery_id'),
    schema='imagery_data'
    )
    op.create_index(op.f('ix_imagery_data_imagery_acquisition_date'), 'imagery', ['acquisition_date'], unique=False, schema='imagery_data')
    op.create_index(op.f('ix_imagery_data_imagery_imagery_id'), 'imagery', ['imagery_id'], unique=False, schema='imagery_data')
    op.create_index(op.f('ix_imagery_data_imagery_project_id'), 'imagery', ['project_id'], unique=False, schema='imagery_data')
    op.create_index(op.f('ix_imagery_data_imagery_source_identifier'), 'imagery', ['source_identifier'], unique=False, schema='imagery_data')
    op.create_table('forest_boundaries',
    sa.Column('forest_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('forest_name', sa.String(length=100), nullable=True),
    sa.Column('forest_type', sa.String(length=50), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.Column('area_ha', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('valid_to', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('source_date', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user_mgmt.users.user_id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project_mgmt.projects.project_id'], ),
    sa.PrimaryKeyConstraint('forest_id'),
    schema='spatial'
    )
    op.create_index('idx_forest_boundaries_geometry', 'forest_boundaries', ['geometry'], unique=False, schema='spatial', postgresql_using='gist')
    op.create_index(op.f('ix_spatial_forest_boundaries_forest_id'), 'forest_boundaries', ['forest_id'], unique=False, schema='spatial')
    op.create_index(op.f('ix_spatial_forest_boundaries_project_id'), 'forest_boundaries', ['project_id'], unique=False, schema='spatial')
    op.create_table('forest_plots',
    sa.Column('plot_id', sa.Integer(), nullable=False),
    sa.Column('forest_id', sa.Integer(), nullable=False),
    sa.Column('plot_name', sa.String(length=150), nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.CheckConstraint('ST_IsValid(geometry)', name='enforce_valid_plot_geometry'),
    sa.ForeignKeyConstraint(['created_by'], ['user_mgmt.users.user_id'], ),
    sa.ForeignKeyConstraint(['forest_id'], ['spatial.forest_boundaries.forest_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('plot_id'),
    schema='spatial'
    )
    op.create_index('idx_forest_plots_geometry', 'forest_plots', ['geometry'], unique=False, schema='spatial', postgresql_using='gist')
    op.create_index(op.f('ix_spatial_forest_plots_forest_id'), 'forest_plots', ['forest_id'], unique=False, schema='spatial')
    op.create_index(op.f('ix_spatial_forest_plots_plot_id'), 'forest_plots', ['plot_id'], unique=False, schema='spatial')
    op.create_table('baseline',
    sa.Column('baseline_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('forest_id', sa.Integer(), nullable=True),
    sa.Column('plot_id', sa.Integer(), nullable=True),
    sa.Column('species_id', sa.Integer(), nullable=True),
    sa.Column('calculation_level', sa.String(length=20), nullable=False),
    sa.Column('reference_period_start', sa.Date(), nullable=True),
    sa.Column('reference_period_end', sa.Date(), nullable=True),
    sa.Column('baseline_type', sa.String(length=50), nullable=True),
    sa.Column('baseline_carbon', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('baseline_co2e', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('parameters', sa.JSON(), nullable=True),
    sa.Column('uncertainty', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user_mgmt.users.user_id'], ),
    sa.ForeignKeyConstraint(['forest_id'], ['spatial.forest_boundaries.forest_id'], ),
    sa.ForeignKeyConstraint(['plot_id'], ['spatial.forest_plots.plot_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['project_mgmt.projects.project_id'], ),
    sa.ForeignKeyConstraint(['species_id'], ['reference.tree_species.species_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('baseline_id'),
    schema='calculation'
    )
    op.create_index(op.f('ix_calculation_baseline_baseline_id'), 'baseline', ['baseline_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_baseline_calculation_level'), 'baseline', ['calculation_level'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_baseline_forest_id'), 'baseline', ['forest_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_baseline_plot_id'), 'baseline', ['plot_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_baseline_project_id'), 'baseline', ['project_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_baseline_species_id'), 'baseline', ['species_id'], unique=False, schema='calculation')
    op.create_table('biomass',
    sa.Column('biomass_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('forest_id', sa.Integer(), nullable=True),
    sa.Column('plot_id', sa.Integer(), nullable=True),
    sa.Column('species_id', sa.Integer(), nullable=True),
    sa.Column('calculation_level', sa.String(length=20), nullable=False),
    sa.Column('calculation_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('agb_per_ha', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('agb_total', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('bgb_total', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('total_biomass', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('allometric_equation_details', sa.String(length=255), nullable=True),
    sa.Column('parameters', sa.JSON(), nullable=True),
    sa.Column('uncertainty', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user_mgmt.users.user_id'], ),
    sa.ForeignKeyConstraint(['forest_id'], ['spatial.forest_boundaries.forest_id'], ),
    sa.ForeignKeyConstraint(['plot_id'], ['spatial.forest_plots.plot_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['project_mgmt.projects.project_id'], ),
    sa.ForeignKeyConstraint(['species_id'], ['reference.tree_species.species_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('biomass_id'),
    schema='calculation'
    )
    op.create_index(op.f('ix_calculation_biomass_biomass_id'), 'biomass', ['biomass_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_biomass_calculation_level'), 'biomass', ['calculation_level'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_biomass_forest_id'), 'biomass', ['forest_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_biomass_plot_id'), 'biomass', ['plot_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_biomass_project_id'), 'biomass', ['project_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_biomass_species_id'), 'biomass', ['species_id'], unique=False, schema='calculation')
    op.create_table('plot_composition',
    sa.Column('plot_composition_id', sa.Integer(), nullable=False),
    sa.Column('plot_id', sa.Integer(), nullable=False),
    sa.Column('species_id', sa.Integer(), nullable=False),
    sa.Column('percentage_cover', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('stem_density', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('average_dbh', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('average_height', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('measurement_date', sa.Date(), nullable=False),
    sa.Column('source', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.CheckConstraint('percentage_cover >= 0 AND percentage_cover <= 100', name='check_percentage_cover_range'),
    sa.ForeignKeyConstraint(['created_by'], ['user_mgmt.users.user_id'], ),
    sa.ForeignKeyConstraint(['plot_id'], ['spatial.forest_plots.plot_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['species_id'], ['reference.tree_species.species_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('plot_composition_id'),
    sa.UniqueConstraint('plot_id', 'species_id', 'measurement_date', name='uq_plot_species_date'),
    schema='spatial'
    )
    op.create_index(op.f('ix_spatial_plot_composition_measurement_date'), 'plot_composition', ['measurement_date'], unique=False, schema='spatial')
    op.create_index(op.f('ix_spatial_plot_composition_plot_composition_id'), 'plot_composition', ['plot_composition_id'], unique=False, schema='spatial')
    op.create_index(op.f('ix_spatial_plot_composition_plot_id'), 'plot_composition', ['plot_id'], unique=False, schema='spatial')
    op.create_index(op.f('ix_spatial_plot_composition_species_id'), 'plot_composition', ['species_id'], unique=False, schema='spatial')
    op.create_table('carbon_stock',
    sa.Column('carbon_id', sa.Integer(), nullable=False),
    sa.Column('biomass_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('forest_id', sa.Integer(), nullable=True),
    sa.Column('plot_id', sa.Integer(), nullable=True),
    sa.Column('species_id', sa.Integer(), nullable=True),
    sa.Column('calculation_level', sa.String(length=20), nullable=False),
    sa.Column('calculation_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('agb_carbon', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('bgb_carbon', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('total_carbon', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('carbon_density', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('agb_co2e', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('bgb_co2e', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('total_co2e', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('uncertainty', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['biomass_id'], ['calculation.biomass.biomass_id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user_mgmt.users.user_id'], ),
    sa.ForeignKeyConstraint(['forest_id'], ['spatial.forest_boundaries.forest_id'], ),
    sa.ForeignKeyConstraint(['plot_id'], ['spatial.forest_plots.plot_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['project_mgmt.projects.project_id'], ),
    sa.ForeignKeyConstraint(['species_id'], ['reference.tree_species.species_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('carbon_id'),
    sa.UniqueConstraint('biomass_id'),
    schema='calculation'
    )
    op.create_index(op.f('ix_calculation_carbon_stock_calculation_level'), 'carbon_stock', ['calculation_level'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_carbon_stock_carbon_id'), 'carbon_stock', ['carbon_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_carbon_stock_forest_id'), 'carbon_stock', ['forest_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_carbon_stock_plot_id'), 'carbon_stock', ['plot_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_carbon_stock_project_id'), 'carbon_stock', ['project_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_carbon_stock_species_id'), 'carbon_stock', ['species_id'], unique=False, schema='calculation')
    op.create_table('carbon_credits',
    sa.Column('credit_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('forest_id', sa.Integer(), nullable=True),
    sa.Column('plot_id', sa.Integer(), nullable=True),
    sa.Column('species_id', sa.Integer(), nullable=True),
    sa.Column('carbon_id', sa.Integer(), nullable=False),
    sa.Column('baseline_id', sa.Integer(), nullable=False),
    sa.Column('calculation_level', sa.String(length=20), nullable=False),
    sa.Column('calculation_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('emission_reduction', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('emission_reduction_co2e', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('buffer_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('buffer_amount', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('leakage_factor', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('leakage_deduction', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('uncertainty_deduction', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('creditable_amount', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('methodology', sa.String(length=50), nullable=True),
    sa.Column('uncertainty', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('verification_status', sa.String(length=20), nullable=True),
    sa.Column('verified_by', sa.Integer(), nullable=True),
    sa.Column('verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['baseline_id'], ['calculation.baseline.baseline_id'], ),
    sa.ForeignKeyConstraint(['carbon_id'], ['calculation.carbon_stock.carbon_id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user_mgmt.users.user_id'], ),
    sa.ForeignKeyConstraint(['forest_id'], ['spatial.forest_boundaries.forest_id'], ),
    sa.ForeignKeyConstraint(['plot_id'], ['spatial.forest_plots.plot_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['project_mgmt.projects.project_id'], ),
    sa.ForeignKeyConstraint(['species_id'], ['reference.tree_species.species_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['verified_by'], ['user_mgmt.users.user_id'], ),
    sa.PrimaryKeyConstraint('credit_id'),
    schema='calculation'
    )
    op.create_index(op.f('ix_calculation_carbon_credits_calculation_level'), 'carbon_credits', ['calculation_level'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_carbon_credits_credit_id'), 'carbon_credits', ['credit_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_carbon_credits_forest_id'), 'carbon_credits', ['forest_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_carbon_credits_plot_id'), 'carbon_credits', ['plot_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_carbon_credits_project_id'), 'carbon_credits', ['project_id'], unique=False, schema='calculation')
    op.create_index(op.f('ix_calculation_carbon_credits_species_id'), 'carbon_credits', ['species_id'], unique=False, schema='calculation')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_mgmt_users_username'), table_name='users', schema='user_mgmt')
    op.drop_index(op.f('ix_user_mgmt_users_user_id'), table_name='users', schema='user_mgmt')
    op.drop_index(op.f('ix_user_mgmt_users_email'), table_name='users', schema='user_mgmt')
    op.drop_table('users', schema='user_mgmt')
    op.drop_table('role_permissions', schema='user_mgmt')
    op.drop_index(op.f('ix_reference_tree_species_species_id'), table_name='tree_species', schema='reference')
    op.drop_index(op.f('ix_reference_tree_species_scientific_name'), table_name='tree_species', schema='reference')
    op.drop_table('tree_species', schema='reference')
    op.drop_index(op.f('ix_user_mgmt_roles_role_name'), table_name='roles', schema='user_mgmt')
    op.drop_index(op.f('ix_user_mgmt_roles_role_id'), table_name='roles', schema='user_mgmt')
    op.drop_table('roles', schema='user_mgmt')
    op.drop_index(op.f('ix_user_mgmt_permissions_permission_name'), table_name='permissions', schema='user_mgmt')
    op.drop_index(op.f('ix_user_mgmt_permissions_permission_id'), table_name='permissions', schema='user_mgmt')
    op.drop_table('permissions', schema='user_mgmt')
    op.drop_index(op.f('ix_reference_allometric_equations_equation_id'), table_name='allometric_equations', schema='reference')
    op.drop_table('allometric_equations', schema='reference')

    op.execute("DROP SCHEMA IF EXISTS user_mgmt CASCADE")
    op.execute("DROP SCHEMA IF EXISTS spatial CASCADE")
    op.execute("DROP SCHEMA IF EXISTS reference CASCADE")
    op.execute("DROP SCHEMA IF EXISTS project_mgmt CASCADE")
    op.execute("DROP SCHEMA IF EXISTS imagery_data CASCADE")
    op.execute("DROP SCHEMA IF EXISTS calculation CASCADE")

    # Drop ENUM types
    op.execute("DROP TYPE IF EXISTS projectstatus CASCADE")
    op.execute("DROP TYPE IF EXISTS imagerysourceenum CASCADE")
    op.execute("DROP TYPE IF EXISTS imagenystatusenum CASCADE")
    op.execute("DROP TYPE IF EXISTS foresttypeenum CASCADE")
    # ### end Alembic commands ###
