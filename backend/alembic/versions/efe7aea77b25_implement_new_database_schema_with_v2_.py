"""Implement new database schema with v2 models

Revision ID: efe7aea77b25
Revises: 
Create Date: 2025-06-08 06:57:38.962523

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'efe7aea77b25'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.execute("CREATE EXTENSION IF NOT EXISTS postgis")
    op.execute("CREATE SCHEMA IF NOT EXISTS carbon_mgmt")
    op.execute("CREATE SCHEMA IF NOT EXISTS user_mgmt")
    op.execute("CREATE SCHEMA IF NOT EXISTS analytics")
    op.execute("CREATE SCHEMA IF NOT EXISTS project_mgmt")
    op.execute("CREATE SCHEMA IF NOT EXISTS p2p_marketplace")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ecosystems',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('carbon_factor', sa.Float(), nullable=False),
    sa.Column('biomass_factor', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='carbon_mgmt'
    )
    op.create_index(op.f('ix_carbon_mgmt_ecosystems_name'), 'ecosystems', ['name'], unique=True, schema='carbon_mgmt')
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=True),
    sa.Column('organization', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('stripe_customer_id', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_customer_id'),
    schema='user_mgmt'
    )
    op.create_index(op.f('ix_user_mgmt_users_email'), 'users', ['email'], unique=True, schema='user_mgmt')
    op.create_table('analytics_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_mgmt.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='analytics'
    )
    op.create_index(op.f('ix_analytics_analytics_events_event_type'), 'analytics_events', ['event_type'], unique=False, schema='analytics')
    # First check if table exists and drop if needed
    op.execute("DROP TABLE IF EXISTS project_mgmt.projects CASCADE")
    
    op.create_table('projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('project_type', sa.Enum('FORESTRY', name='projecttype'), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'UNDER_REVIEW', 'ACTIVE', 'COMPLETED', 'REJECTED', name='projectstatus'), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('location_geometry', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['user_mgmt.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='project_mgmt'
    )
    
    # Create index if it doesn't exist
    op.execute("CREATE INDEX IF NOT EXISTS idx_projects_location_geometry ON project_mgmt.projects USING gist (location_geometry)")
    op.create_index(op.f('ix_project_mgmt_projects_name'), 'projects', ['name'], unique=False, schema='project_mgmt')
    op.create_table('carbon_credits',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('vcs_serial_number', sa.String(length=255), nullable=False),
    sa.Column('quantity_co2e', sa.Float(), nullable=False),
    sa.Column('vintage_year', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('ISSUED', 'LISTED', 'SOLD', 'RETIRED', name='creditstatus'), nullable=False),
    sa.Column('issuance_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project_mgmt.projects.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='carbon_mgmt'
    )
    op.create_index(op.f('ix_carbon_mgmt_carbon_credits_vcs_serial_number'), 'carbon_credits', ['vcs_serial_number'], unique=True, schema='carbon_mgmt')
    op.create_table('project_bookmarks',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project_mgmt.projects.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_mgmt.users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'project_id'),
    schema='user_mgmt'
    )
    op.create_table('p2p_listings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('credit_id', sa.UUID(), nullable=False),
    sa.Column('seller_id', sa.UUID(), nullable=False),
    sa.Column('price_per_ton', sa.Float(), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'SOLD', 'CANCELLED', name='listingstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['credit_id'], ['carbon_mgmt.carbon_credits.id'], ),
    sa.ForeignKeyConstraint(['seller_id'], ['user_mgmt.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('credit_id'),
    schema='p2p_marketplace'
    )
    op.create_table('transactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('listing_id', sa.UUID(), nullable=False),
    sa.Column('buyer_id', sa.UUID(), nullable=False),
    sa.Column('seller_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('total_price', sa.Float(), nullable=False),
    sa.Column('stripe_charge_id', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'COMPLETED', 'FAILED', name='transactionstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['buyer_id'], ['user_mgmt.users.id'], ),
    sa.ForeignKeyConstraint(['listing_id'], ['p2p_marketplace.p2p_listings.id'], ),
    sa.ForeignKeyConstraint(['seller_id'], ['user_mgmt.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_charge_id'),
    schema='p2p_marketplace'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transactions', schema='p2p_marketplace')
    op.drop_table('p2p_listings', schema='p2p_marketplace')
    op.drop_table('project_bookmarks', schema='user_mgmt')
    op.drop_index(op.f('ix_carbon_mgmt_carbon_credits_vcs_serial_number'), table_name='carbon_credits', schema='carbon_mgmt')
    op.drop_table('carbon_credits', schema='carbon_mgmt')
    op.drop_index(op.f('ix_project_mgmt_projects_name'), table_name='projects', schema='project_mgmt')
    op.drop_index('idx_projects_location_geometry', table_name='projects', schema='project_mgmt', postgresql_using='gist')
    op.drop_table('projects', schema='project_mgmt')
    op.drop_index(op.f('ix_analytics_analytics_events_event_type'), table_name='analytics_events', schema='analytics')
    op.drop_table('analytics_events', schema='analytics')
    op.drop_index(op.f('ix_user_mgmt_users_email'), table_name='users', schema='user_mgmt')
    op.drop_table('users', schema='user_mgmt')
    op.drop_index(op.f('ix_carbon_mgmt_ecosystems_name'), table_name='ecosystems', schema='carbon_mgmt')
    op.drop_table('ecosystems', schema='carbon_mgmt')
    op.execute("DROP SCHEMA IF EXISTS p2p_marketplace")
    op.execute("DROP SCHEMA IF EXISTS project_mgmt")
    op.execute("DROP SCHEMA IF EXISTS analytics")
    op.execute("DROP SCHEMA IF EXISTS user_mgmt")
    op.execute("DROP SCHEMA IF EXISTS carbon_mgmt")
    op.execute("DROP EXTENSION IF EXISTS postgis")
    # ### end Alembic commands ###
